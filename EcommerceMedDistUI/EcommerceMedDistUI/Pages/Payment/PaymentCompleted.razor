@page "/pagamento/completo/{PaymentId}"

@using EcommerceMedDistUI.ViewModels.Payment
@using Newtonsoft.Json

@inject NotificationService _notificationService
@inject NavigationManager _navigationManager
@inject IPaymentServices _paymentServices

@*@if (IsAuthenticated.HasValue && IsAuthenticated.Value)
{*@
    <div class="row m-5">
        <div class="col-md-5 col-lg-4 order-md-last">
            <h4 class="d-flex justify-content-between align-items-center mb-3">
                <span class="text-primary">Produtos</span>
                <span class="badge bg-primary rounded-pill">
                    @(Payment.ShoppingCart != null ? Payment.ShoppingCart.ProductsInCart.Sum(p => { 
                        if(p.Concentrations.Any())
                            return p.Concentrations.Count();
                        else
                            return 1;
                    }): 0)
                </span>
            </h4>
            <ul class="list-group mb-3">
                @foreach (var productInCart in Payment.ShoppingCart.ProductsInCart)
                {
                    @foreach (var concentrationInCartVM in productInCart.Concentrations)
                    {
                        <li class="list-group-item d-flex justify-content-between lh-sm">
                            <div>
                                <h6 class="my-0">@productInCart.Name</h6>
                                <small class="text-muted">@concentrationInCartVM.ConcentrationDescription</small>
                            </div>
                            <span class="text-muted">@($"{concentrationInCartVM.SellingPrice * concentrationInCartVM.Quantity} R$")</span>
                        </li>
                    }
                }
                <li class="list-group-item d-flex justify-content-between">
                    <span>Total</span>
                    <strong>
                        @($"{(Payment.ShoppingCart != null ? Payment.ShoppingCart.ProductsInCart.Sum(s => s.Concentrations.Sum(c => c.SellingPrice * (decimal)c.ConcentrationValue)) : 0)} R$")
                    </strong>
                </li>
            </ul>
        </div>
        
        <div class="col-md-7 col-lg-8">
            <hr class="my-4">
            <h4 class="mb-3">Método de Pagamento</h4>
            <div class="my-3">
                <div class="form-check">
                    <input disabled @bind="Payment.Boleto" id="boleto" name="paymentMethod" type="checkbox" 
                        class="form-check-input" required="">
                    <label class="form-check-label" for="boleto">Boleto</label>
                </div>
            </div>
            <h4 class="mb-3">Endereço de Cobrança</h4>
            <form class="needs-validation" novalidate>

                <div class="row g-3">
                    <div class="col-sm-6">
                        <label for="cpfCnpj" class="form-label">CNPJ ou CPF</label>
                        <p value="@(Payment.CpfCnpj)" id="cpfCnpj" />
                        <div class="invalid-feedback">
                            Digite um número de documento válido.
                        </div>
                    </div>
                </div>
            </form>
        </div>
    </div>
@*}
else
{
    <div class="d-flex align-items-center" style="min-height: 40vh">
        <div class="w-100 text-center">
            <h3>Você não está autenticado!</h3>
            <h4>Click no botão abaixo para realizar o login:</h4>
            <button @onclick="BeginSignIn" type="button" class="btn btn-success">Login</button>
        </div>
    </div>
}*@

@code {
    [Parameter]
    public string PaymentId { get; set; } = string.Empty;
    public PaymentVM Payment { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        if (string.IsNullOrEmpty(PaymentId))
        {
            var message = new NotificationMessage 
            { 
                Severity = NotificationSeverity.Error, 
                Summary = "Pagamento não encontrado!", 
                Detail = $"", 
                Duration = 8000 
            };
            _notificationService.Notify(message);
        }
        await GetPayment();
        await base.OnInitializedAsync();
    }

    async Task GetPayment()
    {
        try
        {
            Payment = await _paymentServices.GetPayment(PaymentId);
        }
        catch(Exception e)
        {
            var message = new NotificationMessage 
            { 
                Severity = NotificationSeverity.Error, 
                Summary = "Erro ao buscar o pagamento!", 
                Detail = $"{e.Message}", 
                Duration = 8000 
            };
            _notificationService.Notify(message);
        }
    }
}
