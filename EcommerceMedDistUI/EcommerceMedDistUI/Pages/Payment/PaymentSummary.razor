@page "/pagamento/resumo"
@using System.Security.Claims
@using EcommerceMedDistUI.ViewModels.CEP
@using EcommerceMedDistUI.ViewModels.Payment
@using System.Text.RegularExpressions
@using System.Globalization

@inject AuthenticationStateProvider AuthenticationStateProvider 
@inject NavigationManager _navigationManager
@inject NotificationService _notificationService
@inject IPaymentServices _paymentServices
@inject ILocalStorageService _localStorage
@inject StateContainer _stateContainer

@*@if (IsAuthenticated.HasValue && IsAuthenticated.Value)
{*@
    <div class="row m-5">
        <div class="col-md-5 col-lg-4 order-md-last">
            <h4 class="d-flex justify-content-between align-items-center mb-3">
                <span class="text-primary">Seu Carrinho</span>
                <span class="badge bg-primary rounded-pill">3</span>
            </h4>
            <ul class="list-group mb-3">
                @foreach (var shoppingCart in ShoppingCarts)
                {
                    @foreach (var concentrationInCartVM in shoppingCart.ProductInCart.Concentrations)
                    {
                        <li class="list-group-item d-flex justify-content-between lh-sm">
                            <div>
                                <h6 class="my-0">@shoppingCart.ProductInCart.Name</h6>
                                <small class="text-muted">@concentrationInCartVM.ConcentrationDescription</small>
                            </div>
                            <span class="text-muted">@($"{concentrationInCartVM.SellingPrice * concentrationInCartVM.Quantity} R$")</span>
                        </li>
                    }
                }
                <li class="list-group-item d-flex justify-content-between">
                    <span>Total</span>
                    <strong>
                        @($"{(ShoppingCarts != null ? ShoppingCarts.Sum(s => s.ProductInCart.Concentrations.Sum(c => c.SellingPrice)) : 0)} R$")
                    </strong>
                </li>
            </ul>
        </div>
        
        <div class="col-md-7 col-lg-8">
            <hr class="my-4">
            <h4 class="mb-3">Método de Pagamento</h4>
            <div class="my-3">
                <div class="form-check">
                    <input disabled @bind="PaymentVM.Boleto" id="boleto" name="paymentMethod" type="checkbox" 
                        class="form-check-input" required="">
                    <label class="form-check-label" for="boleto">Boleto</label>
                </div>
            </div>
            <h4 class="mb-3">Endereço de Cobrança</h4>
            <form class="needs-validation" novalidate>

                <div class="row g-3">
                    <div class="col-sm-6">
                        <label for="cpfCnpj" class="form-label">CNPJ ou CPF</label>
                        <input disabled value="@(PaymentVM.CpfCnpj)" type="text" class="@(cpfCnpjCssClasses)" id="cpfCnpj" required>
                        <div class="invalid-feedback">
                            Digite um número de documento válido.
                        </div>
                    </div>
                </div>

                <div class="row">
                    <div class="col-sm-6">
                        <label for="firstName" class="form-label">Nome no Boleto</label>
                        <input disabled value="@(PaymentVM.Name)" type="text" 
                            class="@(nameInDocumentCssClasses)" id="firstName" placeholder="" required="">
                        <div class="invalid-feedback">
                            Digite um nome válido.
                        </div>
                    </div>
                </div>

                <div class="row">
                    <div class="col-sm-3">
                        <label for="zip" class="form-label">CEP</label>
                        <input disabled value="@(PaymentVM.BillingAddressVM.Cep)" type="string" 
                            class="@(cepBillingAddressCssClasses)" id="zip" placeholder="" required="">
                        <div class="invalid-feedback">
                        Informe um CEP válido.
                        </div>
                    </div>
                </div>

                <div class="row">

                    <div class="col-sm-12">
                        <label for="email" class="form-label">E-mail <span class="text-muted">(E-mail que receberá o boleto)</span></label>
                        <input disabled value="@(PaymentVM.Email)" type="email" 
                            class="@(emailCssClasses)" id="email" placeholder="email@exemplo.com">
                        <div class="invalid-feedback">
                        E-mail onde as informações relativas a compra serão enviadas.
                        </div>
                    </div>

                    <div class="col-sm-8">
                        <label for="streetBillingAddress" class="form-label">Rua</label>
                        <input disabled @bind="PaymentVM.BillingAddressVM.Street" type="text" class="form-control" 
                            id="streetBillingAddress" placeholder="" required="">
                    </div>

                    <div class="col-sm-4">
                        <label for="numeroBillingAddress" class="form-label">Número</label>
                        <input disabled value="@(PaymentVM.BillingAddressVM.Number)" 
                            type="text" class="@(numberBillingAddressCssClasses)" 
                            id="numeroBillingAddress" placeholder="" required="">
                        <div class="invalid-feedback">
                        Por favor, informe um número de rua válido.
                        </div>
                    </div>

                    <div class="col-sm-6">
                        <label for="complementBillingAddress" class="form-label">Complemento <span class="text-muted">(Optional)</span></label>
                        <input disabled @bind="PaymentVM.BillingAddressVM.Complement" type="text" class="form-control" 
                            id="complementBillingAddress" placeholder="Apart...">
                    </div>

                    <div class="col-sm-6">
                        <label for="districtBillingAddress" class="form-label">Bairro</label>
                        <input disabled @bind="PaymentVM.BillingAddressVM.District" type="text" class="form-control" 
                            id="districtBillingAddress" placeholder="">
                    </div>

                    <div class="col-sm-4">
                        <label for="cityBillingAddress" class="form-label">Cidade</label>
                        <input disabled @bind="PaymentVM.BillingAddressVM.City" type="text" class="form-control" 
                            id="cityBillingAddress" placeholder="" required=""/>
                    </div>

                    <div class="col-sm-4">
                        <label for="stateBillingAddress" class="form-label">Estado</label>
                        <input disabled @bind="PaymentVM.BillingAddressVM.State" type="text" class="form-control" 
                            id="BillingAddress" placeholder="" required=""/>
                    </div>
                </div>

                <hr class="my-4">

                <div class="form-check">
                    <input disabled @bind="PaymentVM.BillingEqualShippingAddress" type="checkbox" 
                        class="form-check-input" id="same-address" />
                    <label class="form-check-label" for="same-address">Endereço de cobrança é igual ao endereço de entrega</label>
                </div>

                <hr class="my-4">

            @if (!PaymentVM.BillingEqualShippingAddress)
            {
                <h4 class="mb-3">Endereço de Entrega</h4>
                    <div class="row">
                        <div class="col-sm-3">
                            <label for="cepShippimentAddress" class="form-label">CEP</label>
                            <input disabled value="@(PaymentVM.ShippimentAddressVM.Cep)" type="number" 
                                class="@(cepShippimentAddressCssClasses)" id="cepShippimentAddress" required="">
                            <div class="invalid-feedback">
                            Informe um CEP válido.
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-sm-8">
                            <label for="streetShippimentAddress" class="form-label">Rua</label>
                            <input disabled @bind="PaymentVM.ShippimentAddressVM.Street" type="text" class="form-control" 
                                id="streetShippimentAddress" required="">
                        </div>

                        <div class="col-sm-4">
                            <label for="numberShippimentAddress" class="form-label">Número</label>
                            <input disabled @bind="PaymentVM.ShippimentAddressVM.Number" type="text" 
                                class="@(numberShippimentAddressCssClasses)" id="numberShippimentAddress" required="">
                            <div class="invalid-feedback">
                            Por favor, informe um número de rua válido.
                            </div>
                        </div>

                        <div class="col-sm-6">
                            <label for="complementShippimentAddress" class="form-label">Complemento <span class="text-muted">(Optional)</span></label>
                            <input disabled @bind="PaymentVM.ShippimentAddressVM.Complement" type="text" 
                                class="form-control" placeholder="Apart..." id="complementShippimentAddress">
                        </div>

                        <div class="col-sm-6">
                            <label for="districtShippimentAddress" class="form-label">Bairro</label>
                            <input disabled @bind="PaymentVM.ShippimentAddressVM.District" type="text" class="form-control" 
                                id="districtShippimentAddress">
                        </div>

                        <div class="col-sm-4">
                            <label for="cityShippimentAddress" class="form-label">Cidade</label>
                            <input disabled @bind="PaymentVM.ShippimentAddressVM.City" type="text" class="form-control" 
                                id="cityShippimentAddress" required=""/>
                        </div>

                        <div class="col-sm-4">
                            <label for="stateShippimentAddress" class="form-label">Estado</label>
                            <input disabled @bind="PaymentVM.ShippimentAddressVM.State" type="text" class="form-control" 
                                id="stateShippimentAddress" required=""/>
                        </div>
                    </div>

                    <hr class="my-4">
            }
                <button @onclick="(args) => NavigateToPaymentCreation()" class="btn btn-secondary btn-lg">
                    Voltar
                </button>
                <button @onclick="(args) => CreateNewPayment(args)" class="btn btn-primary btn-lg float-end">
                    Confirmar o Pagamento
                </button>
            </form>
        </div>
    </div>
@*}
else
{
    <div class="d-flex align-items-center" style="min-height: 40vh">
        <div class="w-100 text-center">
            <h3>Você não está autenticado!</h3>
            <h4>Click no botão abaixo para realizar o login:</h4>
            <button @onclick="BeginSignIn" type="button" class="btn btn-success">Login</button>
        </div>
    </div>
}*@

@code {
    [Parameter]
    public bool? IsAuthenticated { get; set; } = false;
    [Parameter]
    public PaymentVM PaymentVM { get; set; }
    List<ShoppingCartVM> ShoppingCarts { get; set; } = new();
    ClaimsPrincipal User { get; set; } = new();
    bool cpfCnpjIsValid { get; set; } = true;
    bool cepBillingAddressIsValid { get; set; } = false;
    bool cepShippimentAddressIsValid { get; set; } = false;

    string cssValidClasses { get; set; } = "form-control is-valid";
    string cssInValidClasses { get; set; } = "form-control is-invalid";
    string cpfCnpjCssClasses { get; set; } = "form-control";
    string nameInDocumentCssClasses { get; set; } = "form-control";
    string cepBillingAddressCssClasses { get; set; } = "form-control";
    string emailCssClasses { get; set; } = "form-control";
    string cepShippimentAddressCssClasses { get; set; } = "form-control";
    string numberBillingAddressCssClasses { get; set; } = "form-control";
    string numberShippimentAddressCssClasses { get; set; } = "form-control";

    protected override async Task OnInitializedAsync()
    {
        PaymentVM = _stateContainer.Property;
        ShoppingCarts = await _localStorage.GetItemAsync<List<ShoppingCartVM>>(Constants.ShoppingCart);
        await base.OnInitializedAsync();
    }

    void NavigateToPaymentCreation()
    {
        _navigationManager.NavigateTo("/pagamento");
    }

    async Task CreateNewPayment(MouseEventArgs args)
    {
        try
        {
            if (Validate())
            {
                await _paymentServices.CreateNewPayment(PaymentVM);
                var message = new NotificationMessage 
                { 
                    Severity = NotificationSeverity.Success, 
                    Summary = "Boleto criado com sucesso!", 
                    Detail = $"", 
                    Duration = 8000 
                };
                _notificationService.Notify(message);
            }
            else
            {
                var message = new NotificationMessage 
                { 
                    Severity = NotificationSeverity.Error, 
                    Summary = "Existem erros nos dados de pagamento!", 
                    Detail = "", 
                    Duration = 8000 
                };
                _notificationService.Notify(message);
            }
        }
        catch(Exception e)
        {
            var message = new NotificationMessage 
            { 
                Severity = NotificationSeverity.Error, 
                Summary = "Erro ao processar o pagamento!", 
                Detail = e.Message, 
                Duration = 8000 
            };
            _notificationService.Notify(message);
        }
    }

    bool Validate()
    {
        return cpfCnpjIsValid &&
            ValidateNameInDocument() &&
            ValidadeCep() &&
            ValidateEmail() &&
            ValidateBillingAddressNumber() &&
            ValidateShippimentAddressNumber();
    }

    bool ValidateShippimentAddressNumber()
    {
        if (PaymentVM.BillingEqualShippingAddress)
        {
            return true;
        }
        if (string.IsNullOrEmpty(PaymentVM.ShippimentAddressVM.Number))
        {
            numberShippimentAddressCssClasses = cssInValidClasses;
            return false;
        }
        numberShippimentAddressCssClasses = cssValidClasses;
        return true;
    }

    bool ValidateBillingAddressNumber()
    {
        if (string.IsNullOrEmpty(PaymentVM.BillingAddressVM.Number))
        {
            numberBillingAddressCssClasses = cssInValidClasses;
            return false;
        }
        numberBillingAddressCssClasses = cssValidClasses;
        return true;
    }

    bool ValidateEmail()
    {
        if (string.IsNullOrWhiteSpace(PaymentVM.Email))
        {
            emailCssClasses = cssInValidClasses;
            return false;
        }
        try
        {
            // Normalize the domain
            PaymentVM.Email = Regex.Replace(PaymentVM.Email, @"(@)(.+)$", DomainMapper,
                                    RegexOptions.None, TimeSpan.FromMilliseconds(200));

            // Examines the domain part of the email and normalizes it.
            string DomainMapper(Match match)
            {
                // Use IdnMapping class to convert Unicode domain names.
                var idn = new IdnMapping();

                // Pull out and process domain name (throws ArgumentException on invalid)
                string domainName = idn.GetAscii(match.Groups[2].Value);

                return match.Groups[1].Value + domainName;
            }
        }
        catch (RegexMatchTimeoutException e)
        {
            emailCssClasses = cssInValidClasses;
            return false;
        }
        catch (ArgumentException e)
        {
            emailCssClasses = cssInValidClasses;
            return false;
        }
        try
        {
            if(Regex.IsMatch(PaymentVM.Email,
                @"^[^@\s]+@[^@\s]+\.[^@\s]+$",
                RegexOptions.IgnoreCase, TimeSpan.FromMilliseconds(250)))
            {
                emailCssClasses = cssValidClasses;
                return true;
            }
        }
        catch (RegexMatchTimeoutException)
        {
            emailCssClasses = cssInValidClasses;
            return false;
        }
        emailCssClasses = cssValidClasses;
        return true;
    }

    bool ValidadeCep()
    {
        return cepBillingAddressIsValid && (PaymentVM.BillingEqualShippingAddress || cepShippimentAddressIsValid);
    }

    bool ValidateNameInDocument()
    {
        if (string.IsNullOrEmpty(PaymentVM.Name) || PaymentVM.Name.Count() <= 3)
        {
            nameInDocumentCssClasses = cssInValidClasses;
            return false;
        }
        nameInDocumentCssClasses = cssValidClasses;
        return true;
    }

    bool ValidateDocument(string cpfCnpj)
    {
        bool isValid = false;
        if (IsCnpj(cpfCnpj))
            isValid = true;
        else if (IsCpf(cpfCnpj))
            isValid = true;
        else
            isValid = false;
        if (isValid)
        {
            cpfCnpjCssClasses = "form-control is-valid";
            PaymentVM.CpfCnpj = cpfCnpj;
        }
        else
        {
            cpfCnpjCssClasses = "form-control is-invalid";
            var message = new NotificationMessage 
            { 
                Severity = NotificationSeverity.Error, 
                Summary = "CPF/CNPJ não é valido", 
                Detail = "", 
                Duration = 5000 
            };
            _notificationService.Notify(message);
        }
        cpfCnpjIsValid = isValid;
        return isValid;
    }

    bool IsCnpj(string cnpj)
	{
		int[] multiplicador1 = new int[12] {5,4,3,2,9,8,7,6,5,4,3,2};
		int[] multiplicador2 = new int[13] {6,5,4,3,2,9,8,7,6,5,4,3,2};
		int soma;
		int resto;
		string digito;
		string tempCnpj;
		cnpj = cnpj.Trim();
		cnpj = cnpj.Replace(".", "").Replace("-", "").Replace("/", "");
		if (cnpj.Length != 14)
			return false;
		tempCnpj = cnpj.Substring(0, 12);
		soma = 0;
		for(int i=0; i<12; i++)
			soma += int.Parse(tempCnpj[i].ToString()) * multiplicador1[i];
		resto = (soma % 11);
		if ( resto < 2)
			resto = 0;
		else
			resto = 11 - resto;
		digito = resto.ToString();
		tempCnpj = tempCnpj + digito;
		soma = 0;
		for (int i = 0; i < 13; i++)
			soma += int.Parse(tempCnpj[i].ToString()) * multiplicador2[i];
		resto = (soma % 11);
		if (resto < 2)
			resto = 0;
		else
			resto = 11 - resto;
		digito = digito + resto.ToString();
		return cnpj.EndsWith(digito);
	}

    bool IsCpf(string cpf)
	{
		int[] multiplicador1 = new int[9] { 10, 9, 8, 7, 6, 5, 4, 3, 2 };
		int[] multiplicador2 = new int[10] { 11, 10, 9, 8, 7, 6, 5, 4, 3, 2 };
		string tempCpf;
		string digito;
		int soma;
		int resto;
		cpf = cpf.Trim();
		cpf = cpf.Replace(".", "").Replace("-", "");
		if (cpf.Length != 11)
		   return false;
		tempCpf = cpf.Substring(0, 9);
		soma = 0;
		for(int i=0; i<9; i++)
		    soma += int.Parse(tempCpf[i].ToString()) * multiplicador1[i];
		resto = soma % 11;
		if ( resto < 2 )
		    resto = 0;
		else
		   resto = 11 - resto;
		digito = resto.ToString();
		tempCpf = tempCpf + digito;
		soma = 0;
		for(int i=0; i<10; i++)
		    soma += int.Parse(tempCpf[i].ToString()) * multiplicador2[i];
		resto = soma % 11;
		if (resto < 2)
		   resto = 0;
		else
		   resto = 11 - resto;
		digito = digito + resto.ToString();
	    return cpf.EndsWith(digito);
	}
}
