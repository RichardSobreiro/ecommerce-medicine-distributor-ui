@page "/"
@page "/comprar"

<PageTitle>Comprar</PageTitle>

@inject NotificationService _notificationService
@inject NavigationManager _navigationManager

@inject IProducsServices _productsService
@inject IJSRuntime JS

<div class="row">
    <div class="col text-center">
        <h1>Buscar Materiais e Medicamentos</h1>
    </div>
</div>

<div class="input-group mb-3">
    <span class="input-group-text" id="inputGroup-sizing-default">Pesquisa por Nome</span>
    <input @onkeydown="@Enter" @bind="PartialProductName" type="text" class="form-control" aria-label="Sizing example input" aria-describedby="inputGroup-sizing-default">
    <button
        @onclick="@(async (args) => await SearchProducts(args))" type="button" class="btn btn-outline-primary btn-lg">
        <i class="bi bi-search p-2"></i>Procurar
    </button>
</div>

@foreach(var product in products)
{
    <div class="row row-cols-1 row-cols-md-3 mb-3 text-center">
        <div class="col">
            <div class="card mb-4 rounded-3 shadow-sm">
                <div class="card-header py-3">
                    <h4 class="my-0 fw-normal">@product.Name</h4>
                </div>
                <div class="card-body">
                    <table class="table">
                        <thead>
                            <tr>
                                <th scope="col">Concentração</th>
                                <th scope="col">Preço</th>
                                <th scope="col">Negociar</th>
                                <th scope="col">Comprar</th>
                            </tr>
                        </thead>
                        <tbody>
                        @foreach (var concentration in product.SelectedDrugsConcentrations)
                        {
                            <tr>
                                <td>@concentration.ConcentrationDescription</td>
                                <td>@concentration.SellingPrice R$</td>
                                <td>
                                    <!-- Negotiation -->
                                    <button @onclick="@(async (args) => await OpenNegotiationArea(args, product.Id))"
                                    type="button" class="btn btn-secondary" 
                                    data-bs-toggle="tooltip" data-bs-placement="top" 
                                    title="Digite aqui mesmo o valor que você gostaria de pagar.">
                                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-people-fill" viewBox="0 0 16 16">
                                            <path d="M7 14s-1 0-1-1 1-4 5-4 5 3 5 4-1 1-1 1H7Zm4-6a3 3 0 1 0 0-6 3 3 0 0 0 0 6Zm-5.784 6A2.238 2.238 0 0 1 5 13c0-1.355.68-2.75 1.936-3.72A6.325 6.325 0 0 0 5 9c-4 0-5 3-5 4s1 1 1 1h4.216ZM4.5 8a2.5 2.5 0 1 0 0-5 2.5 2.5 0 0 0 0 5Z"></path>
                                        </svg>
                                    </button>
                                </td>
                                <td>
                                    <!-- Purchase -->
                                    <span data-bs-toggle="modal" data-bs-target="#addToCartModal">
                                        <button @onclick="@(async (args) => await AddProductToCart(args, product.Id))"
                                        type="button" class="btn btn-secondary" 
                                        data-bs-toggle="tooltip" data-bs-placement="top" data-bs-trigger="hover" 
                                        title="Adicione o produto ao seu carrinho!">
                                            <svg style="padding-bottom:4px;" xmlns="http://www.w3.org/2000/svg" width="22" height="22" fill="currentColor" class="bi bi-cart" viewBox="0 0 16 16">
                                              <path d="M0 1.5A.5.5 0 0 1 .5 1H2a.5.5 0 0 1 .485.379L2.89 3H14.5a.5.5 0 0 1 .491.592l-1.5 8A.5.5 0 0 1 13 12H4a.5.5 0 0 1-.491-.408L2.01 3.607 1.61 2H.5a.5.5 0 0 1-.5-.5zM3.102 4l1.313 7h8.17l1.313-7H3.102zM5 12a2 2 0 1 0 0 4 2 2 0 0 0 0-4zm7 0a2 2 0 1 0 0 4 2 2 0 0 0 0-4zm-7 1a1 1 0 1 1 0 2 1 1 0 0 1 0-2zm7 0a1 1 0 1 1 0 2 1 1 0 0 1 0-2z"></path>
                                            </svg>
                                        </button>
                                    </span>
                                </td>
                            </tr>
                        }
                        </tbody>
                    </table>
                    <button @onclick="@(async (args) => await ChatWithOperator(args))" 
                    data-bs-toggle="tooltip" data-bs-placement="top" title="Converse com um atendente por aqui mesmo!"
                    type="button" class="w-100 btn btn-lg btn-outline-primary">Chat com Atendente
                    </button>
                </div>
            </div>
        </div>
    </div>
}

<!-- Modal -->
<div class="modal fade" id="addToCartModal" data-bs-backdrop="static" data-bs-keyboard="false" 
tabindex="-1" aria-labelledby="addToCartModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered">
    <div class="modal-content">
      <div class="modal-header">
        <h1 class="modal-title fs-5" id="addToCartModalLabel">Modal title</h1>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        ...
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
        <button type="button" class="btn btn-primary">Save changes</button>
      </div>
    </div>
  </div>
</div>

@code {
    string? PartialProductName { get; set; }
    List<ProductVM> products { get; set; } = new();
    ProductVM ProductToBeAddedToCart { get; set; } = new();

    public async Task Enter(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            await SearchProducts(new MouseEventArgs());
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JS.InvokeAsync<string>("initializeJsFunctions.Tooltips", null);
        await base.OnAfterRenderAsync(firstRender);
    }

    async Task SearchProducts(MouseEventArgs args)
    {
        await JS.InvokeAsync<string>("initializeJsFunctions.HideAllTooltips", null);
        if (ValidateProductsSearch())
        {
            products = await _productsService.SearchProductByName(PartialProductName);
        }
    }

    bool ValidateProductsSearch()
    {
        if (string.IsNullOrEmpty(PartialProductName))
        {
            var message = new NotificationMessage 
            { 
                Severity = NotificationSeverity.Error, 
                Summary = "Campos Inválidos", 
                Detail = "Preencha um valor para o nome do produto ou medicamento!", 
                Duration = 5000 
            };
            _notificationService.Notify(message);
            return false;
        }
        if (PartialProductName.Length < 3)
        {
            var message = new NotificationMessage 
            { 
                Severity = NotificationSeverity.Error, 
                Summary = "Campos Inválidos", 
                Detail = "O nome do produto ou medicamento precisa ser maior ou igual a 3 caracteres!", 
                Duration = 5000 
            };
            _notificationService.Notify(message);
            return false;
        }
        return true;
    }

    async Task OpenNegotiationArea(MouseEventArgs args, string? productId)
    {
        await JS.InvokeAsync<string>("initializeJsFunctions.HideAllTooltips", null);
    }

    async Task AddProductToCart(MouseEventArgs args, string? productId)
    {
        await JS.InvokeAsync<string>("initializeJsFunctions.HideAllTooltips", null);
        var product = products.FirstOrDefault(p => p.Id == productId);
        if(product != null)
        {
            
        }
    }

    async Task ChatWithOperator(MouseEventArgs args)
    {
        await JS.InvokeAsync<string>("initializeJsFunctions.HideAllTooltips", null);
    }
}
